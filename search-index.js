var searchIndex = JSON.parse('{\
"biscuit":{"doc":"Build Status Crates.io Repository Documentation dependency…","i":[[3,"TemporalOptions","biscuit","Options for validating temporal claims",null,null],[12,"epsilon","","Allow for some leeway for clock drifts, limited to this…",0,null],[12,"now","","Specify a time to use in temporal validation instead of…",0,null],[3,"Empty","","An empty struct that derives Serialize and Deserialize.…",null,null],[3,"Base64Url","","A newtype wrapper around a string to indicate it\'s base64…",null,null],[3,"Compact","","A collection of `CompactPart`s that have been converted to…",null,null],[12,"parts","","Parts of the compact representation",1,null],[3,"Timestamp","","Wrapper around `DateTime<Utc>` to allow us to do custom…",null,null],[3,"RegisteredClaims","","Registered claims defined by RFC7519#4.1",null,null],[12,"issuer","","Token issuer. Serialized to `iss`.",2,null],[12,"subject","","Subject where the JWT is referring to. Serialized to `sub`",2,null],[12,"audience","","Audience intended for the JWT. Serialized to `aud`",2,null],[12,"expiry","","Expiration time in seconds since Unix Epoch. Serialized to…",2,null],[12,"not_before","","Not before time in seconds since Unix Epoch. Serialized to…",2,null],[12,"issued_at","","Issued at Time in seconds since Unix Epoch. Serialized to…",2,null],[12,"id","","Application specific JWT ID. Serialized to `jti`",2,null],[3,"ClaimPresenceOptions","","Options for claims presence validation",null,null],[12,"issued_at","","Whether the `iat` or `Issued At` field is required",3,null],[12,"not_before","","Whether the `nbf` or `Not Before` field is required",3,null],[12,"expiry","","Whether the `exp` or `Expiry` field is required",3,null],[12,"issuer","","Whether the `iss` or `Issuer` field is required",3,null],[12,"audience","","Whether the `aud` or `Audience` field is required",3,null],[12,"subject","","Whether the `sub` or `Subject` field is required",3,null],[12,"id","","Whether the `jti` or `JWT ID` field is required",3,null],[3,"ValidationOptions","","Options for claims validation",null,null],[12,"claim_presence_options","","Claims marked as required will trigger a validation…",4,null],[12,"temporal_options","","Define how to validate temporal claims",4,null],[12,"issued_at","","Validation options for `iat` or `Issued At` claim if…",4,null],[12,"not_before","","Validation options for `nbf` or `Not Before` claim if…",4,null],[12,"expiry","","Validation options for `exp` or `Expiry` claim if present",4,null],[12,"issuer","","Validation options for `iss` or `Issuer` claim if present…",4,null],[12,"audience","","Validation options for `aud` or `Audience` claim if…",4,null],[3,"ClaimsSet","","A collection of claims, both registered and your custom…",null,null],[12,"registered","","Registered claims defined by the RFC",5,null],[12,"private","","Application specific claims",5,null],[4,"Presence","","Defines whether a claim is required or not",null,null],[13,"Optional","","Claim is optional",6,null],[13,"Required","","Claim is required",6,null],[4,"Validation","","Defines whether a claim is validated or not",null,null],[13,"Ignored","","This claim is not validated",7,null],[13,"Validate","","Validate this claim with type T. Refer to…",7,null],[4,"SingleOrMultiple","","Represents a choice between a single value or multiple…",null,null],[13,"Single","","One single value",8,null],[13,"Multiple","","Multiple values",8,null],[11,"map","","Map the value to another validation requirement, similar…",7,[[],["validation",4]]],[0,"errors","","Errors returned will be converted to one of the structs in…",null,null],[4,"Error","biscuit::errors","All the errors we can encounter while signing/verifying…",null,null],[13,"GenericError","","A generic error which is described by the contained string",9,null],[13,"DecodeError","","Error returned from failed token decoding",9,null],[13,"ValidationError","","Error returned from failed token validation",9,null],[13,"JsonError","","Error during the serialization or deserialization of tokens",9,null],[13,"DecodeBase64","","Error during base64 encoding or decoding",9,null],[13,"Utf8","","Error when decoding bytes to UTF8 string",9,null],[13,"IOError","","Errors related to IO",9,null],[13,"KeyRejected","","Key was rejected by Ring",9,null],[13,"WrongKeyType","","Wrong key type was provided for the cryptographic operation",9,null],[12,"expected","biscuit::errors::Error","Expected type of key",10,null],[12,"actual","","Actual type of key",10,null],[13,"WrongEncryptionOptions","biscuit::errors","Wrong variant of `EncryptionOptions` was provided for the…",9,null],[12,"expected","biscuit::errors::Error","Expected variant of options",11,null],[12,"actual","","Actual variant of options",11,null],[13,"UnspecifiedCryptographicError","biscuit::errors","An unknown cryptographic error",9,null],[13,"UnsupportedOperation","","An unsupported or invalid operation",9,null],[4,"DecodeError","","Errors from decoding tokens",null,null],[13,"InvalidToken","","Token is invalid in structure or form",12,null],[13,"PartsLengthError","","The number of compact parts is incorrect",12,null],[12,"expected","biscuit::errors::DecodeError","Expected number of parts",13,null],[12,"actual","","Actual number of parts",13,null],[4,"ValidationError","biscuit::errors","Errors from validating tokens",null,null],[13,"InvalidSignature","","Token has an invalid signature (RFC7523 3.9)",14,null],[13,"WrongAlgorithmHeader","","Token provided was signed or encrypted with an unexpected…",14,null],[13,"MissingRequiredClaims","","A field required is missing from the token The parameter…",14,null],[13,"Expired","","The token\'s expiry has passed (exp check failled, RFC7523…",14,null],[13,"NotYetValid","","The token is not yet valid (nbf check failed, RFC7523 3.5)…",14,null],[13,"TooOld","","The token has been created too far in the past (iat check…",14,null],[13,"InvalidIssuer","","The token does not have or has the wrong issuer (iss check…",14,null],[13,"InvalidAudience","","The token does not have or has the wrong audience (aud…",14,null],[13,"KidMissing","","The token doesn\'t contains the Kid claim in the header",14,null],[13,"KeyNotFound","","The by the Kid specified key, wasn\'t found in the KeySet",14,null],[13,"UnsupportedKeyAlgorithm","","The algorithm of the JWK is not supported for validating…",14,null],[13,"MissingAlgorithm","","An algorithm is needed for verification but was not provided",14,null],[0,"jwa","biscuit","JSON Web Algorithms",null,null],[8,"SecureRandom","biscuit::jwa","A secure random number generator.",null,null],[10,"fill","","Fills `dest` with random bytes.",15,[[],[["unspecified",3],["result",4]]]],[3,"EncryptionResult","","The result returned from an encryption operation",null,null],[12,"nonce","","The initialization vector, or nonce used in the encryption",16,null],[12,"encrypted","","The encrypted payload",16,null],[12,"tag","","The authentication tag",16,null],[12,"additional_data","","Additional authenticated data that is integrity protected…",16,null],[4,"EncryptionOptions","","Options to be passed in while performing an encryption…",null,null],[13,"None","","No options are required. Most algorithms do not require…",17,null],[13,"AES_GCM","","Options for AES GCM encryption.",17,null],[12,"nonce","biscuit::jwa::EncryptionOptions","Initialization vector, or nonce for the AES GCM…",18,null],[4,"Algorithm","biscuit::jwa","Algorithms described by RFC 7518. This enum is serialized…",null,null],[13,"Signature","","Algorithms meant for Digital signature or MACs See RFC7518#3",19,null],[13,"KeyManagement","","Algorithms meant for key management. The algorithms are…",19,null],[13,"ContentEncryption","","Algorithms meant for content encryption. See RFC7518#5",19,null],[4,"SignatureAlgorithm","","The algorithms supported for digital signature and MACs,…",null,null],[13,"None","","No encryption/signature is included for the JWT. During…",20,null],[13,"HS256","","HMAC using SHA-256",20,null],[13,"HS384","","HMAC using SHA-384",20,null],[13,"HS512","","HMAC using SHA-512",20,null],[13,"RS256","","RSASSA-PKCS1-v1_5 using SHA-256",20,null],[13,"RS384","","RSASSA-PKCS1-v1_5 using SHA-384",20,null],[13,"RS512","","RSASSA-PKCS1-v1_5 using SHA-512",20,null],[13,"ES256","","ECDSA using P-256 and SHA-256",20,null],[13,"ES384","","ECDSA using P-384 and SHA-384",20,null],[13,"ES512","","ECDSA using P-521 and SHA-512 -- This variant is…",20,null],[13,"PS256","","RSASSA-PSS using SHA-256 and MGF1 with SHA-256. The size…",20,null],[13,"PS384","","RSASSA-PSS using SHA-384 and MGF1 with SHA-384 The size of…",20,null],[13,"PS512","","RSASSA-PSS using SHA-512 and MGF1 with SHA-512 The size of…",20,null],[4,"KeyManagementAlgorithm","","Algorithms for key management as defined in RFC7518#4",null,null],[13,"RSA1_5","","RSAES-PKCS1-v1_5",21,null],[13,"RSA_OAEP","","RSAES OAEP using default parameters",21,null],[13,"RSA_OAEP_256","","RSAES OAEP using SHA-256 and MGF1 with SHA-256",21,null],[13,"A128KW","","AES Key Wrap using 128-bit key. Unsupported",21,null],[13,"A192KW","","AES Key Wrap using 192-bit key. Unsupported. This is not…",21,null],[13,"A256KW","","AES Key Wrap using 256-bit key. Unsupported",21,null],[13,"DirectSymmetricKey","","Direct use of a shared symmetric key",21,null],[13,"ECDH_ES","","ECDH-ES using Concat KDF",21,null],[13,"ECDH_ES_A128KW","","ECDH-ES using Concat KDF and \\\"A128KW\\\" wrapping",21,null],[13,"ECDH_ES_A192KW","","ECDH-ES using Concat KDF and \\\"A192KW\\\" wrapping",21,null],[13,"ECDH_ES_A256KW","","ECDH-ES using Concat KDF and \\\"A256KW\\\" wrapping",21,null],[13,"A128GCMKW","","Key wrapping with AES GCM using 128-bit key alg",21,null],[13,"A192GCMKW","","Key wrapping with AES GCM using 192-bit key alg. This is…",21,null],[13,"A256GCMKW","","Key wrapping with AES GCM using 256-bit key alg",21,null],[13,"PBES2_HS256_A128KW","","PBES2 with HMAC SHA-256 and \\\"A128KW\\\" wrapping",21,null],[13,"PBES2_HS384_A192KW","","PBES2 with HMAC SHA-384 and \\\"A192KW\\\" wrapping",21,null],[13,"PBES2_HS512_A256KW","","PBES2 with HMAC SHA-512 and \\\"A256KW\\\" wrapping",21,null],[4,"KeyManagementAlgorithmType","","Describes the type of operations that the key management…",null,null],[13,"SymmetricKeyWrapping","","Wraps a randomly generated CEK using a symmetric…",22,null],[13,"AsymmetricKeyEncryption","","Encrypt a randomly generated CEK using an asymmetric…",22,null],[13,"DirectKeyAgreement","","A key agreement algorithm to pick a CEK",22,null],[13,"KeyAgreementWithKeyWrapping","","A key agreement algorithm used to pick a symmetric CEK and…",22,null],[13,"DirectEncryption","","A user defined symmetric shared key is the CEK",22,null],[4,"ContentEncryptionAlgorithm","","Algorithms meant for content encryption. See RFC7518#5",null,null],[13,"A128CBC_HS256","","AES_128_CBC_HMAC_SHA_256 authenticated encryption…",23,null],[13,"A192CBC_HS384","","AES_192_CBC_HMAC_SHA_384 authenticated encryption…",23,null],[13,"A256CBC_HS512","","AES_256_CBC_HMAC_SHA_512 authenticated encryption…",23,null],[13,"A128GCM","","AES GCM using 128-bit key",23,null],[13,"A192GCM","","AES GCM using 192-bit key This is not supported by `ring`.",23,null],[13,"A256GCM","","AES GCM using 256-bit key",23,null],[11,"description","","Description of the type of key",17,[[]]],[11,"sign","","Take some bytes and sign it according to the algorithm and…",20,[[["secret",4]],[["result",4],["vec",3],["error",4]]]],[11,"verify","","Verify signature based on the algorithm and secret provided.",20,[[["secret",4]],[["error",4],["result",4]]]],[11,"algorithm_type","","Returns the type of operations that the algorithm is…",21,[[],["keymanagementalgorithmtype",4]]],[11,"cek","","Return the Content Encryption Key (CEK) based on the key…",21,[[["contentencryptionalgorithm",4],["jwk",3]],[["jwk",3],["result",4],["error",4]]]],[11,"wrap_key","","Encrypt or wrap a Content Encryption Key with the provided…",21,[[["encryptionoptions",4],["jwk",3]],[["encryptionresult",3],["result",4],["error",4]]]],[11,"unwrap_key","","Decrypt or unwrap a CEK with the provided algorithm",21,[[["encryptionresult",3],["contentencryptionalgorithm",4],["jwk",3]],[["jwk",3],["result",4],["error",4]]]],[11,"generate_key","","Convenience function to generate a new random key with the…",23,[[],[["result",4],["vec",3],["error",4]]]],[11,"encrypt","","Encrypt some payload with the provided algorith",23,[[["encryptionoptions",4],["jwk",3]],[["encryptionresult",3],["result",4],["error",4]]]],[11,"decrypt","","Decrypt some payload with the provided algorith,",23,[[["encryptionresult",3],["jwk",3]],[["result",4],["vec",3],["error",4]]]],[0,"jwe","biscuit","JSON Web Encryption",null,null],[3,"RegisteredHeader","biscuit::jwe","Registered JWE header fields. The fields are defined by…",null,null],[12,"cek_algorithm","","Algorithm used to encrypt or determine the value of the…",24,null],[12,"enc_algorithm","","Content encryption algorithm used to perform authenticated…",24,null],[12,"compression_algorithm","","Compression algorithm applied to plaintext before…",24,null],[12,"media_type","","Media type of the complete JWE. Serialized to `typ`.…",24,null],[12,"content_type","","Content Type of the secured payload. Typically used to…",24,null],[12,"web_key_url","","The JSON Web Key Set URL. This is currently not…",24,null],[12,"web_key","","The JSON Web Key. This is currently not implemented…",24,null],[12,"key_id","","The Key ID. This is currently not implemented (correctly).…",24,null],[12,"x509_url","","X.509 Public key cerfificate URL. This is currently not…",24,null],[12,"x509_chain","","X.509 public key certificate chain. This is currently not…",24,null],[12,"x509_fingerprint","","X.509 Certificate thumbprint. This is currently not…",24,null],[12,"critical","","List of critical extended headers. This is currently not…",24,null],[3,"CekAlgorithmHeader","","Headers specific to the Key management algorithm used.…",null,null],[12,"nonce","","Header for AES GCM Keywrap algorithm. The initialization…",25,null],[12,"tag","","Header for AES GCM Keywrap algorithm. The authentication…",25,null],[3,"Header","","JWE Header, consisting of the registered fields and other…",null,null],[12,"registered","","Registered header fields",26,null],[12,"cek_algorithm","","Key management algorithm specific headers",26,null],[12,"private","","Private header fields",26,null],[4,"CompressionAlgorithm","","Compression algorithm applied to plaintext before…",null,null],[13,"Deflate","","DEFLATE algorithm defined in RFC 1951",27,null],[13,"Other","","Other user-defined algorithm",27,null],[4,"Compact","","Compact representation of a JWE, or an encrypted JWT",null,null],[13,"Decrypted","","Decrypted form of the JWE. This variant cannot be…",28,null],[12,"header","biscuit::jwe::Compact","Embedded header",29,null],[12,"payload","","Payload, usually a signed/unsigned JWT",29,null],[13,"Encrypted","biscuit::jwe","Encrypted JWT. Use this form to send to your clients",28,null],[11,"from_registered_header","","Convenience function to create a header with only…",26,[[["registeredheader",3]]]],[11,"new_decrypted","","Create a new encrypted JWE",28,[[["header",3]]]],[11,"new_encrypted","","Create a new encrypted JWE",28,[[]]],[11,"into_encrypted","","Consumes self and encrypt it. If the token is already…",28,[[["jwk",3],["encryptionoptions",4]],[["result",4],["error",4]]]],[11,"encrypt","","Encrypt an Decrypted JWE.",28,[[["jwk",3],["encryptionoptions",4]],[["result",4],["error",4]]]],[11,"into_decrypted","","Consumes self and decrypt it. If the token is already…",28,[[["keymanagementalgorithm",4],["jwk",3],["contentencryptionalgorithm",4]],[["result",4],["error",4]]]],[11,"decrypt","","Decrypt an encrypted JWE. Provide the expected algorithms…",28,[[["keymanagementalgorithm",4],["jwk",3],["contentencryptionalgorithm",4]],[["result",4],["error",4]]]],[11,"encrypted","","Convenience method to get a reference to the encrypted…",28,[[],[["compact",3],["error",4],["result",4]]]],[11,"encrypted_mut","","Convenience method to get a mutable reference to the…",28,[[],[["result",4],["compact",3],["error",4]]]],[11,"payload","","Convenience method to get a reference to the payload from…",28,[[],[["error",4],["result",4]]]],[11,"payload_mut","","Convenience method to get a mutable reference to the…",28,[[],[["result",4],["error",4]]]],[11,"header","","Convenience method to get a reference to the header from…",28,[[],[["header",3],["result",4],["error",4]]]],[11,"header_mut","","Convenience method to get a reference to the header from…",28,[[],[["result",4],["header",3],["error",4]]]],[11,"unwrap_decrypted","","Consumes self, and move the payload and header out and…",28,[[]]],[11,"unwrap_encrypted","","Consumes self, and move the encrypted Compact…",28,[[],["compact",3]]],[11,"validate","","Validate the temporal claims in the decoded token",28,[[["validationoptions",3]],[["error",4],["result",4]]]],[0,"jwk","biscuit","JSON Web Key",null,null],[3,"CommonParameters","biscuit::jwk","Common JWK parameters",null,null],[12,"public_key_use","","The intended use of the public key. Should not be…",30,null],[12,"key_operations","","The \\\"key_ops\\\" (key operations) parameter identifies the…",30,null],[12,"algorithm","","The algorithm intended for use with the key",30,null],[12,"key_id","","The case sensitive Key ID for the key",30,null],[12,"x509_url","","X.509 Public key cerfificate URL. This is currently not…",30,null],[12,"x509_chain","","X.509 public key certificate chain. This is currently not…",30,null],[12,"x509_fingerprint","","X.509 Certificate thumbprint. This is currently not…",30,null],[3,"EllipticCurveKeyParameters","","Parameters for an Elliptic Curve Key",null,null],[12,"key_type","","Key type value for an Elliptic Curve Key.",31,null],[12,"curve","","The \\\"crv\\\" (curve) parameter identifies the cryptographic…",31,null],[12,"x","","The \\\"x\\\" (x coordinate) parameter contains the x coordinate…",31,null],[12,"y","","The \\\"y\\\" (y coordinate) parameter contains the y coordinate…",31,null],[12,"d","","The \\\"d\\\" (ECC private key) parameter contains the Elliptic…",31,null],[3,"RSAKeyParameters","","Parameters for a RSA Key",null,null],[12,"key_type","","Key type value for a RSA Key",32,null],[12,"n","","The \\\"n\\\" (modulus) parameter contains the modulus value for…",32,null],[12,"e","","The \\\"e\\\" (exponent) parameter contains the exponent value…",32,null],[12,"d","","The \\\"d\\\" (private exponent) parameter contains the private…",32,null],[12,"p","","The \\\"p\\\" (first prime factor) parameter contains the first…",32,null],[12,"q","","The \\\"q\\\" (second prime factor) parameter contains the…",32,null],[12,"dp","","The \\\"dp\\\" (first factor CRT exponent) parameter contains…",32,null],[12,"dq","","The \\\"dq\\\" (second factor CRT exponent) parameter contains…",32,null],[12,"qi","","The \\\"qi\\\" (first CRT coefficient) parameter contains the…",32,null],[12,"other_primes_info","","The \\\"oth\\\" (other primes info) parameter contains an array…",32,null],[3,"OtherPrimesInfo","","The \\\"oth\\\" (other primes info) parameter contains an array…",null,null],[12,"r","","The \\\"r\\\" (prime factor) parameter represents the value of a…",33,null],[12,"d","","The \\\"d\\\" (factor CRT exponent) parameter represents the CRT…",33,null],[12,"t","","The \\\"t\\\" (factor CRT coefficient) parameter member…",33,null],[3,"OctetKeyParameters","","Parameters for an Octet Key",null,null],[12,"key_type","","Key type value for an Octet Key",34,null],[12,"value","","The octet key value",34,null],[3,"OctetKeyPairParameters","","Parameters for an Octet Key Pair",null,null],[12,"key_type","","Key type value for an Octet Key Pair",35,null],[12,"curve","","The \\\"crv\\\" (curve) parameter identifies the cryptographic…",35,null],[12,"x","","The \\\"x\\\" parameter contains the base64 encoded public key",35,null],[12,"d","","The \\\"d\\\" parameter contains the base64 encoded private key",35,null],[3,"JWK","","A JSON object that represents a cryptographic key. The…",null,null],[12,"common","","Common JWK parameters",36,null],[12,"algorithm","","Key algorithm specific parameters",36,null],[12,"additional","","Additional JWK parameters",36,null],[3,"JWKSet","","A JSON object that represents a set of JWKs.",null,null],[12,"keys","","Containted JWKs",37,null],[4,"KeyType","","Type of Key as specified in RFC 7518.",null,null],[13,"EllipticCurve","","Elliptic curve (EC) key",38,null],[13,"RSA","","RSA key",38,null],[13,"Octet","","Octet symmetric key",38,null],[13,"OctetKeyPair","","Octet key pair",38,null],[4,"PublicKeyUse","","The intended usage of the public `KeyType`. This enum is…",null,null],[13,"Signature","","Indicates a public key is meant for signature verification",39,null],[13,"Encryption","","Indicates a public key is meant for encryption",39,null],[13,"Other","","Other usage",39,null],[4,"KeyOperations","","Operations that the key is intended to be used for. This…",null,null],[13,"Sign","","Computer digitial signature or MAC",40,null],[13,"Verify","","Verify digital signature or MAC",40,null],[13,"Encrypt","","Encrypt content",40,null],[13,"Decrypt","","Decrypt content and validate decryption, if applicable",40,null],[13,"WrapKey","","Encrypt key",40,null],[13,"UnwrapKey","","Decrypt key and validate decryption, if applicable",40,null],[13,"DeriveKey","","Derive key",40,null],[13,"DeriveBits","","Derive bits not to be used as a key",40,null],[13,"Other","","Other operation",40,null],[4,"AlgorithmParameters","","Algorithm specific parameters",null,null],[13,"EllipticCurve","","Elliptic curve (EC) key",41,null],[13,"RSA","","RSA key",41,null],[13,"OctetKey","","Octet symmetric key",41,null],[13,"OctetKeyPair","","Octet key pair",41,null],[4,"EllipticCurveKeyType","","Key type value for an Elliptic Curve Key. This single…",null,null],[13,"EC","","Key type value for an Elliptic Curve Key.",42,null],[4,"RSAKeyType","","Key type value for an RSA Key. This single value enum is a…",null,null],[13,"RSA","","Key type value for an RSA Key.",43,null],[4,"OctetKeyType","","Key type value for an Octet symmetric key. This single…",null,null],[13,"Octet","","Key type value for an Octet symmetric key.",44,null],[4,"OctetKeyPairType","","Key type value for an Octet Key Pair. This single value…",null,null],[13,"OctetKeyPair","","Key type value for an Octet Key Pair.",45,null],[4,"EllipticCurve","","Type of cryptographic curve used by a key. This is defined…",null,null],[13,"P256","","P-256 curve",46,null],[13,"P384","","P-384 curve",46,null],[13,"P521","","P-521 curve -- unsupported by `ring`.",46,null],[13,"Curve25519","","Curve25519",46,null],[13,"Curve448","","Curve448",46,null],[11,"description","","Description of the type of key",38,[[]]],[11,"key_type","","Returns the type of key represented by this set of…",41,[[],["keytype",4]]],[11,"octet_key","","Return the byte sequence of an octet key",41,[[],[["result",4],["error",4]]]],[11,"thumbprint","","JWK thumbprints are digests for identifying key material.…",41,[[["algorithm",3]],[["error",3],["string",3],["result",4]]]],[11,"jws_public_key_secret","","Construct a `jws::Secret` RSA public key for signature…",32,[[],["secret",4]]],[11,"new_octet_key","","Convenience to create a new bare-bones Octet key",36,[[]]],[11,"clone_without_additional","","Convenience function to strip out the additional fields",36,[[],[["jwk",3],["empty",3]]]],[11,"key_type","","Returns the type of key represented by this key",36,[[],["keytype",4]]],[11,"octet_key","","Return the byte sequence of an octet key",36,[[],[["result",4],["error",4]]]],[11,"find","","Find the key in the set that matches the given key id, if…",37,[[],[["option",4],["jwk",3]]]],[0,"jws","biscuit","JSON Web Signatures, including JWT signing and headers",null,null],[3,"Header","biscuit::jws","JWS Header, consisting of the registered fields and other…",null,null],[12,"registered","","Registered header fields",47,null],[12,"private","","Private header fields",47,null],[3,"RegisteredHeader","","Registered JWS header fields. The alg defaults to HS256…",null,null],[12,"algorithm","","Algorithms, as defined in RFC 7518, used to sign or…",48,null],[12,"media_type","","Media type of the complete JWS. Serialized to `typ`.…",48,null],[12,"content_type","","Content Type of the secured payload. Typically used to…",48,null],[12,"web_key_url","","The JSON Web Key Set URL. This is currently not…",48,null],[12,"web_key","","The JSON Web Key. This is currently not implemented…",48,null],[12,"key_id","","The Key ID. This is currently not implemented (correctly).…",48,null],[12,"x509_url","","X.509 Public key cerfificate URL. This is currently not…",48,null],[12,"x509_chain","","X.509 public key certificate chain. This is currently not…",48,null],[12,"x509_fingerprint","","X.509 Certificate thumbprint. This is currently not…",48,null],[12,"critical","","List of critical extended headers. This is currently not…",48,null],[4,"Compact","","Compact representation of a JWS",null,null],[13,"Decoded","","Decoded form of the JWS. This variant cannot be serialized…",49,null],[12,"header","biscuit::jws::Compact","Embedded header",50,null],[12,"payload","","Payload, usually a claims set",50,null],[13,"Encoded","biscuit::jws","Encoded and (optionally) signed JWT. Use this form to send…",49,null],[4,"Secret","","The secrets used to sign and/or encrypt tokens",null,null],[13,"None","","Used with the `None` algorithm variant.",51,null],[13,"Bytes","","Bytes used for HMAC secret. Can be constructed from a…",51,null],[13,"RsaKeyPair","","An RSA Key pair constructed from a DER-encoded private key",51,null],[13,"EcdsaKeyPair","","An ECDSA Key pair constructed from a PKCS8 DER encoded…",51,null],[13,"PublicKey","","Bytes of a DER encoded RSA Public Key",51,null],[13,"RSAModulusExponent","","Use the modulus (`n`) and exponent (`e`) of an RSA key…",51,null],[12,"n","biscuit::jws::Secret","RSA modulus",52,null],[12,"e","","RSA exponent",52,null],[11,"new_decoded","biscuit::jws","New decoded JWT",49,[[["header",3]]]],[11,"new_encoded","","New encoded JWT",49,[[]]],[11,"into_encoded","","Consumes self and convert into encoded form. If the token…",49,[[["secret",4]],[["result",4],["error",4]]]],[11,"encode","","Encode the JWT passed and sign the payload using the…",49,[[["secret",4]],[["result",4],["error",4]]]],[11,"into_decoded","","Consumes self and convert into decoded form, verifying the…",49,[[["signaturealgorithm",4],["secret",4]],[["result",4],["error",4]]]],[11,"decode","","Decode a token into the JWT struct and verify its…",49,[[["signaturealgorithm",4],["secret",4]],[["result",4],["error",4]]]],[11,"decode_with_jwks","","Decode a token into the JWT struct and verify its…",49,[[["jwkset",3],["signaturealgorithm",4],["option",4]],[["result",4],["error",4]]]],[11,"encoded","","Convenience method to get a reference to the encoded…",49,[[],[["compact",3],["error",4],["result",4]]]],[11,"encoded_mut","","Convenience method to get a mutable reference to the…",49,[[],[["result",4],["compact",3],["error",4]]]],[11,"payload","","Convenience method to get a reference to the claims set…",49,[[],[["error",4],["result",4]]]],[11,"payload_mut","","Convenience method to get a reference to the claims set…",49,[[],[["result",4],["error",4]]]],[11,"header","","Convenience method to get a reference to the header from a…",49,[[],[["header",3],["error",4],["result",4]]]],[11,"header_mut","","Convenience method to get a reference to the header from a…",49,[[],[["result",4],["header",3],["error",4]]]],[11,"unwrap_decoded","","Consumes self, and move the payload and header out and…",49,[[]]],[11,"unwrap_encoded","","Consumes self, and move the encoded Compact out and return…",49,[[],["compact",3]]],[11,"unverified_header","","Without decoding and verifying the JWS, retrieve a copy of…",49,[[],[["result",4],["header",3],["error",4]]]],[11,"unverified_payload","","Without decoding and verifying the JWS, retrieve a copy of…",49,[[],[["result",4],["error",4]]]],[11,"signature","","Get a copy of the signature",49,[[],[["result",4],["vec",3],["error",4]]]],[11,"validate","","Validate the temporal claims in the decoded token",49,[[["validationoptions",3]],[["error",4],["result",4]]]],[11,"bytes_from_str","","Convenience function to create a secret bytes array from a…",51,[[]]],[11,"rsa_keypair_from_file","","Convenience function to get the RSA Keypair from a DER…",51,[[],[["result",4],["error",4]]]],[11,"ecdsa_keypair_from_file","","Convenience function to get the ECDSA Keypair from a…",51,[[["signaturealgorithm",4]],[["result",4],["error",4]]]],[11,"public_key_from_file","","Convenience function to create a Public key from a DER…",51,[[],[["result",4],["error",4]]]],[11,"from_registered_header","","Convenience function to create a header with only…",47,[[["registeredheader",3]]]],[0,"digest","biscuit","Secure cryptographic digests",null,null],[3,"Algorithm","biscuit::digest","A digest algorithm",null,null],[7,"SHA256","","SHA-256 as specified in FIPS 180-4.",null,null],[7,"SHA384","","SHA-384 as specified in FIPS 180-4.",null,null],[7,"SHA512","","SHA-512 as specified in FIPS 180-4.",null,null],[7,"SHA512_256","","SHA-512/256 as specified in FIPS 180-4.",null,null],[6,"JWT","biscuit","A convenience type alias of the common \\\"JWT\\\" which is a…",null,null],[6,"JWE","","A convenience type alias of a \\\"JWE\\\" which is a compact JWE…",null,null],[8,"CompactPart","","A \\\"part\\\" of the compact representation of JWT/JWS/JWE.…",null,null],[10,"to_bytes","","Convert this part into bytes",53,[[],[["result",4],["vec",3],["error",4]]]],[10,"from_bytes","","Convert a sequence of bytes into Self",53,[[],[["result",4],["error",4]]]],[11,"from_base64","","Base64 decode into Self",53,[[],[["result",4],["error",4]]]],[11,"to_base64","","Serialize `Self` to some form and then base64URL Encode",53,[[],[["error",4],["base64url",3],["result",4]]]],[8,"CompactJson","","A marker trait that indicates that the object is to be…",null,null],[11,"unwrap","","Unwrap the embedded string, consuming self in the process",54,[[],["string",3]]],[11,"str","","\\\"Borrow\\\" the string",54,[[]]],[11,"new","","Create an empty struct",1,[[]]],[11,"with_capacity","","Create an empty struct with some expected capacity",1,[[]]],[11,"push","","Push a `CompactPart` to the end",1,[[["compactpart",8]],[["error",4],["result",4]]]],[11,"len","","Returns the number of parts",1,[[]]],[11,"is_empty","","Returns whether there are no parts",1,[[]]],[11,"encode","","Encodes the various parts into Base64 URL encoding and…",1,[[],["string",3]]],[11,"decode","","Convenience function to split an encoded compact…",1,[[]]],[11,"part","","Convenience function to retrieve a part at a certain index…",1,[[],[["result",4],["error",4],["compactpart",8]]]],[11,"contains","","Checks whether this enum, regardless of single or multiple…",8,[[]]],[11,"iter","","Yields an iterator for the single value or the list",8,[[],[["box",3],["iterator",8]]]],[11,"strict","","Returns a ClaimPresenceOptions where every claim is…",3,[[]]],[11,"validate_claim_presence","","Validates that the token contains the claims defined as…",2,[[["claimpresenceoptions",3]],[["result",4],["validationerror",4]]]],[11,"validate_exp","","Validates that if the token has an `exp` claim, it has not…",2,[[["validation",4],["temporaloptions",3]],[["result",4],["validationerror",4]]]],[11,"validate_nbf","","Validates that if the token has an `nbf` claim, it has…",2,[[["validation",4],["temporaloptions",3]],[["result",4],["validationerror",4]]]],[11,"validate_iat","","Validates that if the token has an `iat` claim, it is not…",2,[[["validation",4]],[["result",4],["validationerror",4]]]],[11,"validate_aud","","Validates that if the token has an `aud` claim, it…",2,[[["validation",4],["string",3]],[["result",4],["validationerror",4]]]],[11,"validate_iss","","Validates that if the token has an `iss` claim, it matches…",2,[[["validation",4],["string",3]],[["result",4],["validationerror",4]]]],[11,"validate","","Performs full validation of the token according to the…",2,[[["validationoptions",3]],[["result",4],["validationerror",4]]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"equivalent","","",0,[[]]],[11,"to_bytes","","JSON serialize the part and return the JSON string bytes",55,[[],[["vec",3],["result",4],["error",4]]]],[11,"from_bytes","","",55,[[],[["error",4],["result",4]]]],[11,"from","","",55,[[]]],[11,"into","","",55,[[]]],[11,"to_owned","","",55,[[]]],[11,"clone_into","","",55,[[]]],[11,"try_from","","",55,[[],["result",4]]],[11,"try_into","","",55,[[],["result",4]]],[11,"borrow","","",55,[[]]],[11,"borrow_mut","","",55,[[]]],[11,"type_id","","",55,[[],["typeid",3]]],[11,"equivalent","","",55,[[]]],[11,"to_bytes","","JSON serialize the part and return the JSON string bytes",54,[[],[["vec",3],["result",4],["error",4]]]],[11,"from_bytes","","",54,[[],[["error",4],["result",4]]]],[11,"from","","",54,[[]]],[11,"into","","",54,[[]]],[11,"to_owned","","",54,[[]]],[11,"clone_into","","",54,[[]]],[11,"try_from","","",54,[[],["result",4]]],[11,"try_into","","",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"borrow_mut","","",54,[[]]],[11,"type_id","","",54,[[],["typeid",3]]],[11,"equivalent","","",54,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"equivalent","","",1,[[]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[]]],[11,"to_owned","","",56,[[]]],[11,"clone_into","","",56,[[]]],[11,"try_from","","",56,[[],["result",4]]],[11,"try_into","","",56,[[],["result",4]]],[11,"borrow","","",56,[[]]],[11,"borrow_mut","","",56,[[]]],[11,"type_id","","",56,[[],["typeid",3]]],[11,"equivalent","","",56,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"equivalent","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"equivalent","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"equivalent","","",4,[[]]],[11,"to_bytes","","JSON serialize the part and return the JSON string bytes",5,[[],[["vec",3],["result",4],["error",4]]]],[11,"from_bytes","","",5,[[],[["error",4],["result",4]]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"equivalent","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"equivalent","","",6,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"equivalent","","",7,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"equivalent","","",8,[[]]],[11,"from","biscuit::errors","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",12,[[]]],[11,"into","","",12,[[]]],[11,"to_string","","",12,[[],["string",3]]],[11,"try_from","","",12,[[],["result",4]]],[11,"try_into","","",12,[[],["result",4]]],[11,"borrow","","",12,[[]]],[11,"borrow_mut","","",12,[[]]],[11,"type_id","","",12,[[],["typeid",3]]],[11,"from","","",14,[[]]],[11,"into","","",14,[[]]],[11,"to_owned","","",14,[[]]],[11,"clone_into","","",14,[[]]],[11,"to_string","","",14,[[],["string",3]]],[11,"try_from","","",14,[[],["result",4]]],[11,"try_into","","",14,[[],["result",4]]],[11,"borrow","","",14,[[]]],[11,"borrow_mut","","",14,[[]]],[11,"type_id","","",14,[[],["typeid",3]]],[11,"equivalent","","",14,[[]]],[11,"from","biscuit::jwa","",16,[[]]],[11,"into","","",16,[[]]],[11,"to_owned","","",16,[[]]],[11,"clone_into","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"equivalent","","",16,[[]]],[11,"from","","",17,[[]]],[11,"into","","",17,[[]]],[11,"to_owned","","",17,[[]]],[11,"clone_into","","",17,[[]]],[11,"to_string","","",17,[[],["string",3]]],[11,"try_from","","",17,[[],["result",4]]],[11,"try_into","","",17,[[],["result",4]]],[11,"borrow","","",17,[[]]],[11,"borrow_mut","","",17,[[]]],[11,"type_id","","",17,[[],["typeid",3]]],[11,"equivalent","","",17,[[]]],[11,"from","","",19,[[]]],[11,"into","","",19,[[]]],[11,"to_owned","","",19,[[]]],[11,"clone_into","","",19,[[]]],[11,"try_from","","",19,[[],["result",4]]],[11,"try_into","","",19,[[],["result",4]]],[11,"borrow","","",19,[[]]],[11,"borrow_mut","","",19,[[]]],[11,"type_id","","",19,[[],["typeid",3]]],[11,"equivalent","","",19,[[]]],[11,"from","","",20,[[]]],[11,"into","","",20,[[]]],[11,"to_owned","","",20,[[]]],[11,"clone_into","","",20,[[]]],[11,"try_from","","",20,[[],["result",4]]],[11,"try_into","","",20,[[],["result",4]]],[11,"borrow","","",20,[[]]],[11,"borrow_mut","","",20,[[]]],[11,"type_id","","",20,[[],["typeid",3]]],[11,"equivalent","","",20,[[]]],[11,"from","","",21,[[]]],[11,"into","","",21,[[]]],[11,"to_owned","","",21,[[]]],[11,"clone_into","","",21,[[]]],[11,"try_from","","",21,[[],["result",4]]],[11,"try_into","","",21,[[],["result",4]]],[11,"borrow","","",21,[[]]],[11,"borrow_mut","","",21,[[]]],[11,"type_id","","",21,[[],["typeid",3]]],[11,"equivalent","","",21,[[]]],[11,"from","","",22,[[]]],[11,"into","","",22,[[]]],[11,"to_owned","","",22,[[]]],[11,"clone_into","","",22,[[]]],[11,"try_from","","",22,[[],["result",4]]],[11,"try_into","","",22,[[],["result",4]]],[11,"borrow","","",22,[[]]],[11,"borrow_mut","","",22,[[]]],[11,"type_id","","",22,[[],["typeid",3]]],[11,"equivalent","","",22,[[]]],[11,"from","","",23,[[]]],[11,"into","","",23,[[]]],[11,"to_owned","","",23,[[]]],[11,"clone_into","","",23,[[]]],[11,"try_from","","",23,[[],["result",4]]],[11,"try_into","","",23,[[],["result",4]]],[11,"borrow","","",23,[[]]],[11,"borrow_mut","","",23,[[]]],[11,"type_id","","",23,[[],["typeid",3]]],[11,"equivalent","","",23,[[]]],[11,"from","biscuit::jwe","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"equivalent","","",24,[[]]],[11,"from","","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"equivalent","","",25,[[]]],[11,"to_bytes","","JSON serialize the part and return the JSON string bytes",26,[[],[["vec",3],["result",4],["error",4]]]],[11,"from_bytes","","",26,[[],[["error",4],["result",4]]]],[11,"from","","",26,[[]]],[11,"into","","",26,[[]]],[11,"to_owned","","",26,[[]]],[11,"clone_into","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"equivalent","","",26,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"to_owned","","",27,[[]]],[11,"clone_into","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"equivalent","","",27,[[]]],[11,"from","","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"equivalent","","",28,[[]]],[11,"from","biscuit::jwk","",30,[[]]],[11,"into","","",30,[[]]],[11,"to_owned","","",30,[[]]],[11,"clone_into","","",30,[[]]],[11,"try_from","","",30,[[],["result",4]]],[11,"try_into","","",30,[[],["result",4]]],[11,"borrow","","",30,[[]]],[11,"borrow_mut","","",30,[[]]],[11,"type_id","","",30,[[],["typeid",3]]],[11,"equivalent","","",30,[[]]],[11,"from","","",31,[[]]],[11,"into","","",31,[[]]],[11,"to_owned","","",31,[[]]],[11,"clone_into","","",31,[[]]],[11,"try_from","","",31,[[],["result",4]]],[11,"try_into","","",31,[[],["result",4]]],[11,"borrow","","",31,[[]]],[11,"borrow_mut","","",31,[[]]],[11,"type_id","","",31,[[],["typeid",3]]],[11,"equivalent","","",31,[[]]],[11,"from","","",32,[[]]],[11,"into","","",32,[[]]],[11,"to_owned","","",32,[[]]],[11,"clone_into","","",32,[[]]],[11,"try_from","","",32,[[],["result",4]]],[11,"try_into","","",32,[[],["result",4]]],[11,"borrow","","",32,[[]]],[11,"borrow_mut","","",32,[[]]],[11,"type_id","","",32,[[],["typeid",3]]],[11,"equivalent","","",32,[[]]],[11,"from","","",33,[[]]],[11,"into","","",33,[[]]],[11,"to_owned","","",33,[[]]],[11,"clone_into","","",33,[[]]],[11,"try_from","","",33,[[],["result",4]]],[11,"try_into","","",33,[[],["result",4]]],[11,"borrow","","",33,[[]]],[11,"borrow_mut","","",33,[[]]],[11,"type_id","","",33,[[],["typeid",3]]],[11,"equivalent","","",33,[[]]],[11,"from","","",34,[[]]],[11,"into","","",34,[[]]],[11,"to_owned","","",34,[[]]],[11,"clone_into","","",34,[[]]],[11,"try_from","","",34,[[],["result",4]]],[11,"try_into","","",34,[[],["result",4]]],[11,"borrow","","",34,[[]]],[11,"borrow_mut","","",34,[[]]],[11,"type_id","","",34,[[],["typeid",3]]],[11,"equivalent","","",34,[[]]],[11,"from","","",35,[[]]],[11,"into","","",35,[[]]],[11,"to_owned","","",35,[[]]],[11,"clone_into","","",35,[[]]],[11,"try_from","","",35,[[],["result",4]]],[11,"try_into","","",35,[[],["result",4]]],[11,"borrow","","",35,[[]]],[11,"borrow_mut","","",35,[[]]],[11,"type_id","","",35,[[],["typeid",3]]],[11,"equivalent","","",35,[[]]],[11,"from","","",36,[[]]],[11,"into","","",36,[[]]],[11,"to_owned","","",36,[[]]],[11,"clone_into","","",36,[[]]],[11,"try_from","","",36,[[],["result",4]]],[11,"try_into","","",36,[[],["result",4]]],[11,"borrow","","",36,[[]]],[11,"borrow_mut","","",36,[[]]],[11,"type_id","","",36,[[],["typeid",3]]],[11,"equivalent","","",36,[[]]],[11,"from","","",37,[[]]],[11,"into","","",37,[[]]],[11,"try_from","","",37,[[],["result",4]]],[11,"try_into","","",37,[[],["result",4]]],[11,"borrow","","",37,[[]]],[11,"borrow_mut","","",37,[[]]],[11,"type_id","","",37,[[],["typeid",3]]],[11,"equivalent","","",37,[[]]],[11,"from","","",38,[[]]],[11,"into","","",38,[[]]],[11,"to_owned","","",38,[[]]],[11,"clone_into","","",38,[[]]],[11,"to_string","","",38,[[],["string",3]]],[11,"try_from","","",38,[[],["result",4]]],[11,"try_into","","",38,[[],["result",4]]],[11,"borrow","","",38,[[]]],[11,"borrow_mut","","",38,[[]]],[11,"type_id","","",38,[[],["typeid",3]]],[11,"equivalent","","",38,[[]]],[11,"from","","",39,[[]]],[11,"into","","",39,[[]]],[11,"to_owned","","",39,[[]]],[11,"clone_into","","",39,[[]]],[11,"try_from","","",39,[[],["result",4]]],[11,"try_into","","",39,[[],["result",4]]],[11,"borrow","","",39,[[]]],[11,"borrow_mut","","",39,[[]]],[11,"type_id","","",39,[[],["typeid",3]]],[11,"equivalent","","",39,[[]]],[11,"from","","",40,[[]]],[11,"into","","",40,[[]]],[11,"to_owned","","",40,[[]]],[11,"clone_into","","",40,[[]]],[11,"try_from","","",40,[[],["result",4]]],[11,"try_into","","",40,[[],["result",4]]],[11,"borrow","","",40,[[]]],[11,"borrow_mut","","",40,[[]]],[11,"type_id","","",40,[[],["typeid",3]]],[11,"equivalent","","",40,[[]]],[11,"from","","",41,[[]]],[11,"into","","",41,[[]]],[11,"to_owned","","",41,[[]]],[11,"clone_into","","",41,[[]]],[11,"try_from","","",41,[[],["result",4]]],[11,"try_into","","",41,[[],["result",4]]],[11,"borrow","","",41,[[]]],[11,"borrow_mut","","",41,[[]]],[11,"type_id","","",41,[[],["typeid",3]]],[11,"equivalent","","",41,[[]]],[11,"from","","",42,[[]]],[11,"into","","",42,[[]]],[11,"to_owned","","",42,[[]]],[11,"clone_into","","",42,[[]]],[11,"try_from","","",42,[[],["result",4]]],[11,"try_into","","",42,[[],["result",4]]],[11,"borrow","","",42,[[]]],[11,"borrow_mut","","",42,[[]]],[11,"type_id","","",42,[[],["typeid",3]]],[11,"equivalent","","",42,[[]]],[11,"from","","",43,[[]]],[11,"into","","",43,[[]]],[11,"to_owned","","",43,[[]]],[11,"clone_into","","",43,[[]]],[11,"try_from","","",43,[[],["result",4]]],[11,"try_into","","",43,[[],["result",4]]],[11,"borrow","","",43,[[]]],[11,"borrow_mut","","",43,[[]]],[11,"type_id","","",43,[[],["typeid",3]]],[11,"equivalent","","",43,[[]]],[11,"from","","",44,[[]]],[11,"into","","",44,[[]]],[11,"to_owned","","",44,[[]]],[11,"clone_into","","",44,[[]]],[11,"try_from","","",44,[[],["result",4]]],[11,"try_into","","",44,[[],["result",4]]],[11,"borrow","","",44,[[]]],[11,"borrow_mut","","",44,[[]]],[11,"type_id","","",44,[[],["typeid",3]]],[11,"equivalent","","",44,[[]]],[11,"from","","",45,[[]]],[11,"into","","",45,[[]]],[11,"to_owned","","",45,[[]]],[11,"clone_into","","",45,[[]]],[11,"try_from","","",45,[[],["result",4]]],[11,"try_into","","",45,[[],["result",4]]],[11,"borrow","","",45,[[]]],[11,"borrow_mut","","",45,[[]]],[11,"type_id","","",45,[[],["typeid",3]]],[11,"equivalent","","",45,[[]]],[11,"from","","",46,[[]]],[11,"into","","",46,[[]]],[11,"to_owned","","",46,[[]]],[11,"clone_into","","",46,[[]]],[11,"try_from","","",46,[[],["result",4]]],[11,"try_into","","",46,[[],["result",4]]],[11,"borrow","","",46,[[]]],[11,"borrow_mut","","",46,[[]]],[11,"type_id","","",46,[[],["typeid",3]]],[11,"equivalent","","",46,[[]]],[11,"to_bytes","biscuit::jws","JSON serialize the part and return the JSON string bytes",47,[[],[["vec",3],["result",4],["error",4]]]],[11,"from_bytes","","",47,[[],[["error",4],["result",4]]]],[11,"from","","",47,[[]]],[11,"into","","",47,[[]]],[11,"to_owned","","",47,[[]]],[11,"clone_into","","",47,[[]]],[11,"try_from","","",47,[[],["result",4]]],[11,"try_into","","",47,[[],["result",4]]],[11,"borrow","","",47,[[]]],[11,"borrow_mut","","",47,[[]]],[11,"type_id","","",47,[[],["typeid",3]]],[11,"equivalent","","",47,[[]]],[11,"from","","",48,[[]]],[11,"into","","",48,[[]]],[11,"to_owned","","",48,[[]]],[11,"clone_into","","",48,[[]]],[11,"try_from","","",48,[[],["result",4]]],[11,"try_into","","",48,[[],["result",4]]],[11,"borrow","","",48,[[]]],[11,"borrow_mut","","",48,[[]]],[11,"type_id","","",48,[[],["typeid",3]]],[11,"equivalent","","",48,[[]]],[11,"to_bytes","","JSON serialize the part and return the JSON string bytes",49,[[],[["vec",3],["result",4],["error",4]]]],[11,"from_bytes","","",49,[[],[["error",4],["result",4]]]],[11,"from","","",49,[[]]],[11,"into","","",49,[[]]],[11,"to_owned","","",49,[[]]],[11,"clone_into","","",49,[[]]],[11,"try_from","","",49,[[],["result",4]]],[11,"try_into","","",49,[[],["result",4]]],[11,"borrow","","",49,[[]]],[11,"borrow_mut","","",49,[[]]],[11,"type_id","","",49,[[],["typeid",3]]],[11,"equivalent","","",49,[[]]],[11,"from","","",51,[[]]],[11,"into","","",51,[[]]],[11,"try_from","","",51,[[],["result",4]]],[11,"try_into","","",51,[[],["result",4]]],[11,"borrow","","",51,[[]]],[11,"borrow_mut","","",51,[[]]],[11,"type_id","","",51,[[],["typeid",3]]],[11,"from","biscuit::digest","",57,[[]]],[11,"into","","",57,[[]]],[11,"try_from","","",57,[[],["result",4]]],[11,"try_into","","",57,[[],["result",4]]],[11,"borrow","","",57,[[]]],[11,"borrow_mut","","",57,[[]]],[11,"type_id","","",57,[[],["typeid",3]]],[11,"to_bytes","biscuit::jws","",49,[[],[["result",4],["vec",3],["error",4]]]],[11,"from_bytes","","",49,[[],[["result",4],["error",4]]]],[11,"to_bytes","biscuit","",54,[[],[["result",4],["vec",3],["error",4]]]],[11,"from_bytes","","Convert a sequence of bytes into Self",54,[[],[["result",4],["error",4]]]],[11,"to_base64","","",54,[[],[["error",4],["base64url",3],["result",4]]]],[11,"from_base64","","",54,[[],[["result",4],["error",4]]]],[11,"as_ref","","",54,[[]]],[11,"from","biscuit::errors","",9,[[["string",3]],["error",4]]],[11,"from","","",9,[[["error",3]],["error",4]]],[11,"from","","",9,[[["decodeerror",3]],["error",4]]],[11,"from","","",9,[[["utf8error",3]],["error",4]]],[11,"from","","",9,[[["validationerror",4]],["error",4]]],[11,"from","","",9,[[["decodeerror",4]],["error",4]]],[11,"from","","",9,[[["error",3]],["error",4]]],[11,"from","","",9,[[["keyrejected",3]],["error",4]]],[11,"from","","",9,[[["unspecified",3]]]],[11,"from","","",9,[[["fromutf8error",3]]]],[11,"from","biscuit::jwe","",26,[[["registeredheader",3]]]],[11,"from","biscuit::jws","",51,[[["rsakeyparameters",3]]]],[11,"from","","",47,[[["registeredheader",3]]]],[11,"from","biscuit","",56,[[["datetime",3],["utc",3]]]],[11,"from","","",56,[[]]],[11,"into","","",56,[[],[["datetime",3],["utc",3]]]],[11,"clone","","",6,[[],["presence",4]]],[11,"clone","","",0,[[],["temporaloptions",3]]],[11,"clone","","",7,[[],["validation",4]]],[11,"clone","biscuit::errors","",14,[[],["validationerror",4]]],[11,"clone","biscuit::jwa","",17,[[],["encryptionoptions",4]]],[11,"clone","","",19,[[],["algorithm",4]]],[11,"clone","","",20,[[],["signaturealgorithm",4]]],[11,"clone","","",21,[[],["keymanagementalgorithm",4]]],[11,"clone","","",22,[[],["keymanagementalgorithmtype",4]]],[11,"clone","","",23,[[],["contentencryptionalgorithm",4]]],[11,"clone","","",16,[[],["encryptionresult",3]]],[11,"clone","biscuit::jwe","",27,[[],["compressionalgorithm",4]]],[11,"clone","","",24,[[],["registeredheader",3]]],[11,"clone","","",25,[[],["cekalgorithmheader",3]]],[11,"clone","","",26,[[],["header",3]]],[11,"clone","","",28,[[],["compact",4]]],[11,"clone","biscuit::jwk","",38,[[],["keytype",4]]],[11,"clone","","",39,[[],["publickeyuse",4]]],[11,"clone","","",40,[[],["keyoperations",4]]],[11,"clone","","",30,[[],["commonparameters",3]]],[11,"clone","","",41,[[],["algorithmparameters",4]]],[11,"clone","","",31,[[],["ellipticcurvekeyparameters",3]]],[11,"clone","","",32,[[],["rsakeyparameters",3]]],[11,"clone","","",33,[[],["otherprimesinfo",3]]],[11,"clone","","",34,[[],["octetkeyparameters",3]]],[11,"clone","","",35,[[],["octetkeypairparameters",3]]],[11,"clone","","",42,[[],["ellipticcurvekeytype",4]]],[11,"clone","","",43,[[],["rsakeytype",4]]],[11,"clone","","",44,[[],["octetkeytype",4]]],[11,"clone","","",45,[[],["octetkeypairtype",4]]],[11,"clone","","",46,[[],["ellipticcurve",4]]],[11,"clone","","",36,[[],["jwk",3]]],[11,"clone","biscuit::jws","",49,[[],["compact",4]]],[11,"clone","","",47,[[],["header",3]]],[11,"clone","","",48,[[],["registeredheader",3]]],[11,"clone","biscuit","",55,[[],["empty",3]]],[11,"clone","","",54,[[],["base64url",3]]],[11,"clone","","",1,[[],["compact",3]]],[11,"clone","","",8,[[],["singleormultiple",4]]],[11,"clone","","",56,[[],["timestamp",3]]],[11,"clone","","",2,[[],["registeredclaims",3]]],[11,"clone","","",3,[[],["claimpresenceoptions",3]]],[11,"clone","","",4,[[],["validationoptions",3]]],[11,"clone","","",5,[[],["claimsset",3]]],[11,"default","","",6,[[]]],[11,"default","","",0,[[]]],[11,"default","","",7,[[]]],[11,"default","biscuit::jwa","",16,[[],["encryptionresult",3]]],[11,"default","","",17,[[]]],[11,"default","","",20,[[]]],[11,"default","","",21,[[]]],[11,"default","","",23,[[]]],[11,"default","biscuit::jwe","",24,[[],["registeredheader",3]]],[11,"default","","",25,[[],["cekalgorithmheader",3]]],[11,"default","","",26,[[],["header",3]]],[11,"default","biscuit::jwk","",30,[[],["commonparameters",3]]],[11,"default","","",31,[[],["ellipticcurvekeyparameters",3]]],[11,"default","","",32,[[],["rsakeyparameters",3]]],[11,"default","","",34,[[],["octetkeyparameters",3]]],[11,"default","","",35,[[],["octetkeypairparameters",3]]],[11,"default","","",42,[[]]],[11,"default","","",43,[[]]],[11,"default","","",44,[[]]],[11,"default","","",45,[[]]],[11,"default","","",46,[[]]],[11,"default","biscuit::jws","",47,[[],["header",3]]],[11,"default","","",48,[[],["registeredheader",3]]],[11,"default","biscuit","",55,[[],["empty",3]]],[11,"default","","",1,[[]]],[11,"default","","",2,[[],["registeredclaims",3]]],[11,"default","","",3,[[],["claimpresenceoptions",3]]],[11,"default","","",4,[[]]],[11,"default","","",5,[[],["claimsset",3]]],[11,"eq","","",6,[[["presence",4]]]],[11,"eq","","",0,[[["temporaloptions",3]]]],[11,"ne","","",0,[[["temporaloptions",3]]]],[11,"eq","","",7,[[["validation",4]]]],[11,"ne","","",7,[[["validation",4]]]],[11,"eq","biscuit::errors","",14,[[["validationerror",4]]]],[11,"ne","","",14,[[["validationerror",4]]]],[11,"eq","biscuit::jwa","",17,[[["encryptionoptions",4]]]],[11,"ne","","",17,[[["encryptionoptions",4]]]],[11,"eq","","",19,[[["algorithm",4]]]],[11,"ne","","",19,[[["algorithm",4]]]],[11,"eq","","",20,[[["signaturealgorithm",4]]]],[11,"eq","","",21,[[["keymanagementalgorithm",4]]]],[11,"eq","","",22,[[["keymanagementalgorithmtype",4]]]],[11,"eq","","",23,[[["contentencryptionalgorithm",4]]]],[11,"eq","","",16,[[["encryptionresult",3]]]],[11,"ne","","",16,[[["encryptionresult",3]]]],[11,"eq","biscuit::jwe","",27,[[["compressionalgorithm",4]]]],[11,"ne","","",27,[[["compressionalgorithm",4]]]],[11,"eq","","",24,[[["registeredheader",3]]]],[11,"ne","","",24,[[["registeredheader",3]]]],[11,"eq","","",25,[[["cekalgorithmheader",3]]]],[11,"ne","","",25,[[["cekalgorithmheader",3]]]],[11,"eq","","",26,[[["header",3]]]],[11,"ne","","",26,[[["header",3]]]],[11,"eq","","",28,[[["compact",4]]]],[11,"ne","","",28,[[["compact",4]]]],[11,"eq","biscuit::jwk","",38,[[["keytype",4]]]],[11,"eq","","",39,[[["publickeyuse",4]]]],[11,"ne","","",39,[[["publickeyuse",4]]]],[11,"eq","","",40,[[["keyoperations",4]]]],[11,"ne","","",40,[[["keyoperations",4]]]],[11,"eq","","",30,[[["commonparameters",3]]]],[11,"ne","","",30,[[["commonparameters",3]]]],[11,"eq","","",41,[[["algorithmparameters",4]]]],[11,"ne","","",41,[[["algorithmparameters",4]]]],[11,"eq","","",31,[[["ellipticcurvekeyparameters",3]]]],[11,"ne","","",31,[[["ellipticcurvekeyparameters",3]]]],[11,"eq","","",32,[[["rsakeyparameters",3]]]],[11,"ne","","",32,[[["rsakeyparameters",3]]]],[11,"eq","","",33,[[["otherprimesinfo",3]]]],[11,"ne","","",33,[[["otherprimesinfo",3]]]],[11,"eq","","",34,[[["octetkeyparameters",3]]]],[11,"ne","","",34,[[["octetkeyparameters",3]]]],[11,"eq","","",35,[[["octetkeypairparameters",3]]]],[11,"ne","","",35,[[["octetkeypairparameters",3]]]],[11,"eq","","",42,[[["ellipticcurvekeytype",4]]]],[11,"eq","","",43,[[["rsakeytype",4]]]],[11,"eq","","",44,[[["octetkeytype",4]]]],[11,"eq","","",45,[[["octetkeypairtype",4]]]],[11,"eq","","",46,[[["ellipticcurve",4]]]],[11,"eq","","",36,[[["jwk",3]]]],[11,"ne","","",36,[[["jwk",3]]]],[11,"eq","","",37,[[["jwkset",3]]]],[11,"ne","","",37,[[["jwkset",3]]]],[11,"eq","biscuit::jws","",49,[[["compact",4]]]],[11,"ne","","",49,[[["compact",4]]]],[11,"eq","","",47,[[["header",3]]]],[11,"ne","","",47,[[["header",3]]]],[11,"eq","","",48,[[["registeredheader",3]]]],[11,"ne","","",48,[[["registeredheader",3]]]],[11,"eq","biscuit","",55,[[["empty",3]]]],[11,"eq","","",54,[[["base64url",3]]]],[11,"ne","","",54,[[["base64url",3]]]],[11,"eq","","",1,[[["compact",3]]]],[11,"ne","","",1,[[["compact",3]]]],[11,"eq","","",8,[[["singleormultiple",4]]]],[11,"ne","","",8,[[["singleormultiple",4]]]],[11,"eq","","",56,[[["timestamp",3]]]],[11,"ne","","",56,[[["timestamp",3]]]],[11,"eq","","",2,[[["registeredclaims",3]]]],[11,"ne","","",2,[[["registeredclaims",3]]]],[11,"eq","","",3,[[["claimpresenceoptions",3]]]],[11,"ne","","",3,[[["claimpresenceoptions",3]]]],[11,"eq","","",4,[[["validationoptions",3]]]],[11,"ne","","",4,[[["validationoptions",3]]]],[11,"eq","","",5,[[["claimsset",3]]]],[11,"ne","","",5,[[["claimsset",3]]]],[11,"deref","","",54,[[]]],[11,"deref","","",56,[[]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","biscuit::errors","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","biscuit::jwa","",17,[[["formatter",3]],["result",6]]],[11,"fmt","","",19,[[["formatter",3]],["result",6]]],[11,"fmt","","",20,[[["formatter",3]],["result",6]]],[11,"fmt","","",21,[[["formatter",3]],["result",6]]],[11,"fmt","","",22,[[["formatter",3]],["result",6]]],[11,"fmt","","",23,[[["formatter",3]],["result",6]]],[11,"fmt","","",16,[[["formatter",3]],["result",6]]],[11,"fmt","biscuit::jwe","",27,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"fmt","","",25,[[["formatter",3]],["result",6]]],[11,"fmt","","",26,[[["formatter",3]],["result",6]]],[11,"fmt","","",28,[[["formatter",3]],["result",6]]],[11,"fmt","biscuit::jwk","",38,[[["formatter",3]],["result",6]]],[11,"fmt","","",39,[[["formatter",3]],["result",6]]],[11,"fmt","","",40,[[["formatter",3]],["result",6]]],[11,"fmt","","",30,[[["formatter",3]],["result",6]]],[11,"fmt","","",41,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",42,[[["formatter",3]],["result",6]]],[11,"fmt","","",43,[[["formatter",3]],["result",6]]],[11,"fmt","","",44,[[["formatter",3]],["result",6]]],[11,"fmt","","",45,[[["formatter",3]],["result",6]]],[11,"fmt","","",46,[[["formatter",3]],["result",6]]],[11,"fmt","","",36,[[["formatter",3]],["result",6]]],[11,"fmt","","",37,[[["formatter",3]],["result",6]]],[11,"fmt","biscuit::jws","",49,[[["formatter",3]],["result",6]]],[11,"fmt","","",47,[[["formatter",3]],["result",6]]],[11,"fmt","","",48,[[["formatter",3]],["result",6]]],[11,"fmt","biscuit","",55,[[["formatter",3]],["result",6]]],[11,"fmt","","",54,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","","",56,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","biscuit::errors","",9,[[["formatter",3]],["result",6]]],[11,"fmt","","",12,[[["formatter",3]],["result",6]]],[11,"fmt","","",14,[[["formatter",3]],["result",6]]],[11,"fmt","biscuit::jwa","",17,[[["formatter",3]],["result",6]]],[11,"fmt","biscuit::jwk","",38,[[["formatter",3]],["result",6]]],[11,"fmt","biscuit","",1,[[["formatter",3]],["result",6]]],[11,"from_str","","This never fails",54,[[],["result",4]]],[11,"borrow","","",54,[[]]],[11,"source","biscuit::errors","",9,[[],[["option",4],["error",8]]]],[11,"source","","",12,[[],[["option",4],["error",8]]]],[11,"source","","",14,[[],[["option",4],["error",8]]]],[11,"serialize","biscuit::jwa","",19,[[],["result",4]]],[11,"serialize","","",20,[[],["result",4]]],[11,"serialize","","",21,[[],["result",4]]],[11,"serialize","","",22,[[],["result",4]]],[11,"serialize","","",23,[[],["result",4]]],[11,"serialize","biscuit::jwe","",27,[[],["result",4]]],[11,"serialize","","",24,[[],["result",4]]],[11,"serialize","","",25,[[],["result",4]]],[11,"serialize","","",26,[[],["result",4]]],[11,"serialize","","",28,[[],["result",4]]],[11,"serialize","biscuit::jwk","",38,[[],["result",4]]],[11,"serialize","","",39,[[],["result",4]]],[11,"serialize","","",40,[[],["result",4]]],[11,"serialize","","",30,[[],["result",4]]],[11,"serialize","","",41,[[],["result",4]]],[11,"serialize","","",31,[[],["result",4]]],[11,"serialize","","",32,[[],["result",4]]],[11,"serialize","","",33,[[],["result",4]]],[11,"serialize","","",34,[[],["result",4]]],[11,"serialize","","",35,[[],["result",4]]],[11,"serialize","","",42,[[],["result",4]]],[11,"serialize","","",43,[[],["result",4]]],[11,"serialize","","",44,[[],["result",4]]],[11,"serialize","","",45,[[],["result",4]]],[11,"serialize","","",46,[[],["result",4]]],[11,"serialize","","",36,[[],["result",4]]],[11,"serialize","","",37,[[],["result",4]]],[11,"serialize","biscuit::jws","",49,[[],["result",4]]],[11,"serialize","","",47,[[],["result",4]]],[11,"serialize","","",48,[[],["result",4]]],[11,"serialize","biscuit","",55,[[],["result",4]]],[11,"serialize","","",54,[[],["result",4]]],[11,"serialize","","",1,[[],["result",4]]],[11,"serialize","","",8,[[],["result",4]]],[11,"serialize","","",56,[[],["result",4]]],[11,"serialize","","",2,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]],[11,"deserialize","biscuit::jwa","",19,[[],["result",4]]],[11,"deserialize","","",20,[[],["result",4]]],[11,"deserialize","","",21,[[],["result",4]]],[11,"deserialize","","",22,[[],["result",4]]],[11,"deserialize","","",23,[[],["result",4]]],[11,"deserialize","biscuit::jwe","",27,[[],["result",4]]],[11,"deserialize","","",24,[[],["result",4]]],[11,"deserialize","","",25,[[],["result",4]]],[11,"deserialize","","",26,[[],["result",4]]],[11,"deserialize","","",28,[[],["result",4]]],[11,"deserialize","biscuit::jwk","",38,[[],["result",4]]],[11,"deserialize","","",39,[[],["result",4]]],[11,"deserialize","","",40,[[],["result",4]]],[11,"deserialize","","",30,[[],["result",4]]],[11,"deserialize","","",41,[[],["result",4]]],[11,"deserialize","","",31,[[],["result",4]]],[11,"deserialize","","",32,[[],["result",4]]],[11,"deserialize","","",33,[[],["result",4]]],[11,"deserialize","","",34,[[],["result",4]]],[11,"deserialize","","",35,[[],["result",4]]],[11,"deserialize","","",42,[[],["result",4]]],[11,"deserialize","","",43,[[],["result",4]]],[11,"deserialize","","",44,[[],["result",4]]],[11,"deserialize","","",45,[[],["result",4]]],[11,"deserialize","","",46,[[],["result",4]]],[11,"deserialize","","",36,[[],["result",4]]],[11,"deserialize","","",37,[[],["result",4]]],[11,"deserialize","biscuit::jws","",49,[[],["result",4]]],[11,"deserialize","","",47,[[],["result",4]]],[11,"deserialize","","",48,[[],["result",4]]],[11,"deserialize","biscuit","",55,[[],["result",4]]],[11,"deserialize","","",54,[[],["result",4]]],[11,"deserialize","","",1,[[],["result",4]]],[11,"deserialize","","",8,[[],["result",4]]],[11,"deserialize","","",56,[[],["result",4]]],[11,"deserialize","","",2,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]]],"p":[[3,"TemporalOptions"],[3,"Compact"],[3,"RegisteredClaims"],[3,"ClaimPresenceOptions"],[3,"ValidationOptions"],[3,"ClaimsSet"],[4,"Presence"],[4,"Validation"],[4,"SingleOrMultiple"],[4,"Error"],[13,"WrongKeyType"],[13,"WrongEncryptionOptions"],[4,"DecodeError"],[13,"PartsLengthError"],[4,"ValidationError"],[8,"SecureRandom"],[3,"EncryptionResult"],[4,"EncryptionOptions"],[13,"AES_GCM"],[4,"Algorithm"],[4,"SignatureAlgorithm"],[4,"KeyManagementAlgorithm"],[4,"KeyManagementAlgorithmType"],[4,"ContentEncryptionAlgorithm"],[3,"RegisteredHeader"],[3,"CekAlgorithmHeader"],[3,"Header"],[4,"CompressionAlgorithm"],[4,"Compact"],[13,"Decrypted"],[3,"CommonParameters"],[3,"EllipticCurveKeyParameters"],[3,"RSAKeyParameters"],[3,"OtherPrimesInfo"],[3,"OctetKeyParameters"],[3,"OctetKeyPairParameters"],[3,"JWK"],[3,"JWKSet"],[4,"KeyType"],[4,"PublicKeyUse"],[4,"KeyOperations"],[4,"AlgorithmParameters"],[4,"EllipticCurveKeyType"],[4,"RSAKeyType"],[4,"OctetKeyType"],[4,"OctetKeyPairType"],[4,"EllipticCurve"],[3,"Header"],[3,"RegisteredHeader"],[4,"Compact"],[13,"Decoded"],[4,"Secret"],[13,"RSAModulusExponent"],[8,"CompactPart"],[3,"Base64Url"],[3,"Empty"],[3,"Timestamp"],[3,"Algorithm"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);